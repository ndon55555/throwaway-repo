/* AUTOGENERATED FILE. DO NOT EDIT. */
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', 'kotlinx-html-js', 'core'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('kotlinx-html-js'), require('core'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module 'browser'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'browser'.");
    }if (typeof this['kotlinx-html-js'] === 'undefined') {
      throw new Error("Error loading module 'browser'. Its dependency 'kotlinx-html-js' was not found. Please, check whether 'kotlinx-html-js' is loaded prior to 'browser'.");
    }if (typeof core === 'undefined') {
      throw new Error("Error loading module 'browser'. Its dependency 'core' was not found. Please, check whether 'core' is loaded prior to 'browser'.");
    }root.browser = factory(typeof browser === 'undefined' ? {} : browser, kotlin, this['kotlinx-html-js'], core);
  }
}(this, function (_, Kotlin, $module$kotlinx_html_js, $module$core) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var ensureNotNull = Kotlin.ensureNotNull;
  var set_style = $module$kotlinx_html_js.kotlinx.html.set_style_ueiko3$;
  var set_id = $module$kotlinx_html_js.kotlinx.html.set_id_ueiko3$;
  var Unit = Kotlin.kotlin.Unit;
  var append = $module$kotlinx_html_js.kotlinx.html.dom.append_k9bwru$;
  var ControllerImpl = $module$core.controller.ControllerImpl;
  var BoardImpl = $module$core.model.board.BoardImpl;
  var GameConfiguration = $module$core.model.game.config.GameConfiguration;
  var BaseGame = $module$core.model.game.BaseGame;
  var Command = $module$core.model.game.Command;
  var equals = Kotlin.equals;
  var throwCCE = Kotlin.throwCCE;
  var attributesMapOf = $module$kotlinx_html_js.kotlinx.html.attributesMapOf_jyasbz$;
  var CANVAS_init = $module$kotlinx_html_js.kotlinx.html.CANVAS;
  var HTMLCanvasElement_0 = HTMLCanvasElement;
  var visitTagAndFinalize = $module$kotlinx_html_js.kotlinx.html.visitTagAndFinalize_g9qte5$;
  var enumEncode = $module$kotlinx_html_js.kotlinx.html.attributes.enumEncode_m4whry$;
  var attributesMapOf_0 = $module$kotlinx_html_js.kotlinx.html.attributesMapOf_alerag$;
  var BUTTON_init = $module$kotlinx_html_js.kotlinx.html.BUTTON;
  var visitTag = $module$kotlinx_html_js.kotlinx.html.visitTag_xwv8ym$;
  var DIV_init = $module$kotlinx_html_js.kotlinx.html.DIV;
  var HTMLDivElement_0 = HTMLDivElement;
  var SPAN_init = $module$kotlinx_html_js.kotlinx.html.SPAN;
  var HTMLSpanElement_0 = HTMLSpanElement;
  var clear = Kotlin.kotlin.dom.clear_asww5s$;
  var min = Kotlin.kotlin.collections.min_exjks8$;
  var max = Kotlin.kotlin.collections.max_exjks8$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var TetrisUI = $module$core.view.TetrisUI;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  function visitAndFinalize$lambda(closure$block) {
    return function ($receiver) {
      closure$block($receiver);
      return Unit;
    };
  }
  function visit$lambda(closure$block) {
    return function ($receiver) {
      closure$block($receiver);
      return Unit;
    };
  }
  function visitAndFinalize$lambda_0(closure$block) {
    return function ($receiver) {
      closure$block($receiver);
      return Unit;
    };
  }
  function visitAndFinalize$lambda_1(closure$block) {
    return function ($receiver) {
      closure$block($receiver);
      return Unit;
    };
  }
  function main() {
    loadHTML();
    loadGame();
  }
  var BOARD_ID;
  var HOLD_ID;
  var UPCOMING_PIECES_ID;
  var RESTART_ID;
  function loadHTML$lambda$lambda$lambda$lambda($receiver) {
    set_id($receiver, HOLD_ID);
    $receiver.width = '120';
    $receiver.height = '120';
    return Unit;
  }
  function loadHTML$lambda$lambda$lambda$lambda_0($receiver) {
    set_id($receiver, 'restart');
    set_style($receiver, 'display: block');
    $receiver.unaryPlus_pdl1vz$('Restart');
    return Unit;
  }
  function loadHTML$lambda$lambda$lambda(this$) {
    return function ($receiver) {
      set_style($receiver, 'display: inline-block; vertical-align: top');
      var $receiver_0 = this$;
      var tmp$;
      Kotlin.isType(tmp$ = visitTagAndFinalize(new CANVAS_init(attributesMapOf('class', null), $receiver_0), $receiver_0, visitAndFinalize$lambda(loadHTML$lambda$lambda$lambda$lambda)), HTMLCanvasElement_0) ? tmp$ : throwCCE();
      visitTag(new BUTTON_init(attributesMapOf_0(['formenctype', null != null ? enumEncode(null) : null, 'formmethod', null != null ? enumEncode(null) : null, 'name', null, 'type', null != null ? enumEncode(null) : null, 'class', null]), $receiver.consumer), visit$lambda(loadHTML$lambda$lambda$lambda$lambda_0));
      return Unit;
    };
  }
  function loadHTML$lambda$lambda$lambda$lambda_1($receiver) {
    set_id($receiver, BOARD_ID);
    $receiver.width = '300';
    $receiver.height = '600';
    return Unit;
  }
  function loadHTML$lambda$lambda$lambda_0(this$) {
    return function ($receiver) {
      set_style($receiver, 'display: inline-block; vertical-align: top');
      var $receiver_0 = this$;
      var tmp$;
      Kotlin.isType(tmp$ = visitTagAndFinalize(new CANVAS_init(attributesMapOf('class', null), $receiver_0), $receiver_0, visitAndFinalize$lambda(loadHTML$lambda$lambda$lambda$lambda_1)), HTMLCanvasElement_0) ? tmp$ : throwCCE();
      return Unit;
    };
  }
  function loadHTML$lambda$lambda$lambda_1($receiver) {
    set_id($receiver, UPCOMING_PIECES_ID);
    set_style($receiver, 'display: inline-block; vertical-align: top');
    return Unit;
  }
  function loadHTML$lambda$lambda(this$) {
    return function ($receiver) {
      set_style($receiver, 'position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%)');
      var $receiver_0 = this$;
      var block = loadHTML$lambda$lambda$lambda(this$);
      var tmp$;
      Kotlin.isType(tmp$ = visitTagAndFinalize(new DIV_init(attributesMapOf('class', null), $receiver_0), $receiver_0, visitAndFinalize$lambda_0(block)), HTMLDivElement_0) ? tmp$ : throwCCE();
      $receiver.unaryPlus_pdl1vz$(' ');
      var $receiver_1 = this$;
      var block_0 = loadHTML$lambda$lambda$lambda_0(this$);
      var tmp$_0;
      Kotlin.isType(tmp$_0 = visitTagAndFinalize(new DIV_init(attributesMapOf('class', null), $receiver_1), $receiver_1, visitAndFinalize$lambda_0(block_0)), HTMLDivElement_0) ? tmp$_0 : throwCCE();
      $receiver.unaryPlus_pdl1vz$(' ');
      var $receiver_2 = this$;
      var tmp$_1;
      Kotlin.isType(tmp$_1 = visitTagAndFinalize(new DIV_init(attributesMapOf('class', null), $receiver_2), $receiver_2, visitAndFinalize$lambda_0(loadHTML$lambda$lambda$lambda_1)), HTMLDivElement_0) ? tmp$_1 : throwCCE();
      return Unit;
    };
  }
  function loadHTML$lambda($receiver) {
    var tmp$;
    Kotlin.isType(tmp$ = visitTagAndFinalize(new SPAN_init(attributesMapOf('class', null), $receiver), $receiver, visitAndFinalize$lambda_1(loadHTML$lambda$lambda($receiver))), HTMLSpanElement_0) ? tmp$ : throwCCE();
    return Unit;
  }
  function loadHTML() {
    append(ensureNotNull(document.body), loadHTML$lambda);
  }
  function loadGame$lambda(closure$controller, closure$view) {
    return function () {
      closure$controller.stop();
      closure$controller.run_7vmjsd$(new BaseGame(new BoardImpl(), new GameConfiguration()), closure$view);
      return Unit;
    };
  }
  function loadGame$lambda_0(key) {
    switch (key) {
      case 'arrowleft':
        return Command.LEFT;
      case 'arrowright':
        return Command.RIGHT;
      case 'arrowup':
        return Command.ROTATE_CW;
      case 'arrowdown':
        return Command.SOFT_DROP;
      case 'z':
        return Command.ROTATE_CCW;
      case ' ':
        return Command.HARD_DROP;
      case 'shift':
        return Command.HOLD;
      default:return Command.DO_NOTHING;
    }
  }
  function loadGame$lambda_1(closure$restartGame, closure$controller, closure$keysToCommand) {
    return function (it) {
      var key = it.key.toLowerCase();
      if (equals(key, 'r')) {
        closure$restartGame();
      } else {
        closure$controller.handleCmdPress_mzjd4c$(closure$keysToCommand(key));
      }
      return Unit;
    };
  }
  function loadGame$lambda_2(closure$controller, closure$keysToCommand) {
    return function (it) {
      var key = it.key.toLowerCase();
      closure$controller.handleCmdRelease_mzjd4c$(closure$keysToCommand(key));
      return Unit;
    };
  }
  function loadGame$lambda_3(closure$restartGame, closure$restartButton) {
    return function (it) {
      closure$restartGame();
      closure$restartButton.blur();
      return Unit;
    };
  }
  function loadGame() {
    var tmp$, tmp$_0, tmp$_1;
    var controller = new ControllerImpl();
    var view = new TetrisWeb();
    var restartGame = loadGame$lambda(controller, view);
    var keysToCommand = loadGame$lambda_0;
    (tmp$ = document.body) != null ? (tmp$.onkeydown = loadGame$lambda_1(restartGame, controller, keysToCommand)) : null;
    (tmp$_0 = document.body) != null ? (tmp$_0.onkeyup = loadGame$lambda_2(controller, keysToCommand)) : null;
    var restartButton = Kotlin.isType(tmp$_1 = document.getElementById(RESTART_ID), HTMLButtonElement) ? tmp$_1 : throwCCE();
    restartButton.onclick = loadGame$lambda_3(restartGame, restartButton);
    controller.run_7vmjsd$(new BaseGame(new BoardImpl(), new GameConfiguration()), view);
  }
  function TetrisWeb() {
  }
  TetrisWeb.prototype.drawCells_4c630g$ = function (cells) {
    var tmp$;
    var canvas = Kotlin.isType(tmp$ = document.getElementById(BOARD_ID), HTMLCanvasElement) ? tmp$ : throwCCE();
    this.clearBoard_0(canvas);
    this.paintCells_0(canvas, cells);
  };
  TetrisWeb.prototype.clearBoard_0 = function (canvas) {
    var tmp$;
    var ctx = Kotlin.isType(tmp$ = canvas.getContext('2d'), CanvasRenderingContext2D) ? tmp$ : throwCCE();
    ctx.fillStyle = 'black';
    ctx.fillRect(0.0, 0.0, canvas.width, canvas.height);
  };
  TetrisWeb.prototype.paintCells_0 = function (canvas, cells) {
    var tmp$;
    tmp$ = cells.iterator();
    while (tmp$.hasNext()) {
      var cell = tmp$.next();
      var color = this.htmlColor_0(cell.color);
      var squareSize = canvas.width / 10 | 0;
      this.paintCell_0(canvas, cell.row, cell.col, squareSize, color);
    }
  };
  TetrisWeb.prototype.drawHeldCells_4c630g$ = function (cells) {
    var tmp$;
    var canvas = Kotlin.isType(tmp$ = document.getElementById(HOLD_ID), HTMLCanvasElement) ? tmp$ : throwCCE();
    this.preview_0(canvas, cells);
  };
  TetrisWeb.prototype.drawUpcomingCells_pqtkx7$ = function (cellsQueue) {
    var tmp$, tmp$_0, tmp$_1;
    var pieceQueueDiv = Kotlin.isType(tmp$ = document.getElementById(UPCOMING_PIECES_ID), HTMLDivElement) ? tmp$ : throwCCE();
    clear(pieceQueueDiv);
    tmp$_0 = cellsQueue.iterator();
    while (tmp$_0.hasNext()) {
      var cells = tmp$_0.next();
      var previewCanvas = Kotlin.isType(tmp$_1 = document.createElement('canvas'), HTMLCanvasElement) ? tmp$_1 : throwCCE();
      previewCanvas.width = 120;
      previewCanvas.height = 120;
      previewCanvas.style.display = 'block';
      this.preview_0(previewCanvas, cells);
      pieceQueueDiv.appendChild(previewCanvas);
    }
  };
  TetrisWeb.prototype.preview_0 = function (canvas, cells) {
    this.clearPreviewCanvas_0(canvas);
    this.paintPreviewCells_0(canvas, cells);
  };
  TetrisWeb.prototype.clearPreviewCanvas_0 = function (canvas) {
    var tmp$;
    var ctx = Kotlin.isType(tmp$ = canvas.getContext('2d'), CanvasRenderingContext2D) ? tmp$ : throwCCE();
    ctx.fillStyle = 'black';
    ctx.fillRect(0.0, 0.0, canvas.width, canvas.height);
  };
  TetrisWeb.prototype.paintPreviewCells_0 = function (canvas, cells) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var PREVIEW_BOX_SIZE = 4;
    var destination = ArrayList_init(collectionSizeOrDefault(cells, 10));
    var tmp$_4;
    tmp$_4 = cells.iterator();
    while (tmp$_4.hasNext()) {
      var item = tmp$_4.next();
      destination.add_11rb$(item.row);
    }
    var rows = destination;
    var destination_0 = ArrayList_init(collectionSizeOrDefault(cells, 10));
    var tmp$_5;
    tmp$_5 = cells.iterator();
    while (tmp$_5.hasNext()) {
      var item_0 = tmp$_5.next();
      destination_0.add_11rb$(item_0.col);
    }
    var cols = destination_0;
    var minRow = (tmp$ = min(rows)) != null ? tmp$ : 0;
    var maxRow = (tmp$_0 = max(rows)) != null ? tmp$_0 : PREVIEW_BOX_SIZE;
    var minCol = (tmp$_1 = min(cols)) != null ? tmp$_1 : 0;
    var maxCol = (tmp$_2 = max(cols)) != null ? tmp$_2 : PREVIEW_BOX_SIZE;
    var dRow = minRow - ((PREVIEW_BOX_SIZE - (maxRow - minRow + 1) | 0) / 2 | 0) | 0;
    var dCol = minCol - ((PREVIEW_BOX_SIZE - (maxCol - minCol + 1) | 0) / 2 | 0) | 0;
    var squareSize = canvas.width / PREVIEW_BOX_SIZE | 0;
    tmp$_3 = cells.iterator();
    while (tmp$_3.hasNext()) {
      var cell = tmp$_3.next();
      var color = this.htmlColor_0(cell.color);
      this.paintCell_0(canvas, cell.row - dRow | 0, cell.col - dCol | 0, squareSize, color);
    }
  };
  TetrisWeb.prototype.paintCell_0 = function (canvas, row, col, squareSize, fillStyle) {
    var tmp$;
    var ctx = Kotlin.isType(tmp$ = canvas.getContext('2d'), CanvasRenderingContext2D) ? tmp$ : throwCCE();
    var size = squareSize;
    ctx.fillStyle = 'grey';
    ctx.fillRect(col * size, row * size, size, size);
    ctx.fillStyle = fillStyle;
    ctx.fillRect(col * size + 1, row * size + 1, size - 2, size - 2);
  };
  TetrisWeb.prototype.htmlColor_0 = function (color) {
    switch (color.name) {
      case 'GREEN':
        return 'green';
      case 'RED':
        return 'red';
      case 'DARK_BLUE':
        return 'blue';
      case 'ORANGE':
        return 'orange';
      case 'LIGHT_BLUE':
        return 'cyan';
      case 'YELLOW':
        return 'yellow';
      case 'PURPLE':
        return 'purple';
      case 'NULL':
        return 'grey';
      default:return Kotlin.noWhenBranchMatched();
    }
  };
  TetrisWeb.$metadata$ = {kind: Kind_CLASS, simpleName: 'TetrisWeb', interfaces: [TetrisUI]};
  _.main = main;
  $$importsForInline$$['kotlinx-html-js'] = $module$kotlinx_html_js;
  _.loadHTML = loadHTML;
  _.loadGame = loadGame;
  var package$view = _.view || (_.view = {});
  package$view.TetrisWeb = TetrisWeb;
  BOARD_ID = 'board';
  HOLD_ID = 'hold';
  UPCOMING_PIECES_ID = 'upcomingPieces';
  RESTART_ID = 'restart';
  main();
  return _;
}));

//# sourceMappingURL=browser.js.map
